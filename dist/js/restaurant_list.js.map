{"version":3,"sources":["dbhelper.js","main.js","sw_register.js","idb.js"],"names":["DBHelper","DATABASE_URL","DB_NAME","OBJECT_STORE_NAME","DB_VER","[object Object]","idb","open","upgradeDb","createObjectStore","keyPath","createIndex","callback","getDb","then","db","transaction","objectStore","getAll","restaurants","length","fetch","response","status","json","store","map","r","put","catch","e","id","restaurant","cuisine","fetchRestaurants","error","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","value","append","fillCuisinesHTML","window","initMap","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","alt","address","more","href","marker","mapMarkerForRestaurant","addListener","location","push","navigator","serviceWorker","register","registration","log","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","call","nativeObject","query","count","instance","items","iterateCursor","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","module","exports","default"],"mappings":"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","file":"restaurant_list.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  static get DB_NAME() {\r\n    return 'mws-rr';\r\n  }\r\n\r\n  static get OBJECT_STORE_NAME() {\r\n    return 'restaurants';\r\n  }\r\n\r\n  static get DB_VER() {\r\n    return 1;\r\n  }\r\n\r\n  static getDb() {\r\n    return idb.open(DBHelper.DB_NAME, DBHelper.DB_VER, upgradeDb => {\r\n      const objectStore = upgradeDb.createObjectStore(DBHelper.OBJECT_STORE_NAME, {\r\n        keyPath: 'id'\r\n      });\r\n\r\n      objectStore.createIndex('by-id', 'id');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    DBHelper.getDb()\r\n    .then(db => {\r\n      if (!db) return;\r\n\r\n      return db\r\n        .transaction(DBHelper.OBJECT_STORE_NAME)\r\n        .objectStore(DBHelper.OBJECT_STORE_NAME)\r\n        .getAll();\r\n    })\r\n    .then(restaurants => {\r\n      if (restaurants && restaurants.length > 0) {\r\n        return callback(null, restaurants);\r\n      } else {\r\n        fetch(DBHelper.DATABASE_URL)\r\n        .then(response => {\r\n          const status = response.status\r\n          if (status !== 200){\r\n            const error = (`Request failed. Returned status of ${status}`);\r\n            return callback(error, null);\r\n          }\r\n\r\n          return response.json().then(restaurants => {\r\n            DBHelper.getDb().then(db => {\r\n              if (!db) return;\r\n\r\n              const store = db\r\n                .transaction(DBHelper.OBJECT_STORE_NAME, 'readwrite')\r\n                .objectStore(DBHelper.OBJECT_STORE_NAME);\r\n\r\n              restaurants.map(r => store.put(r));\r\n            });\r\n            callback(null, restaurants);\r\n          })\r\n        })\r\n        .catch(e => {\r\n          const error = (`Request failed with error: ${e}`);\r\n          callback(error, null);\r\n            \r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.DATABASE_URL}/${id}`)\r\n    .then(response => {\r\n      const status = response.status;\r\n      if (status === 404){\r\n        return callback('Restaurant does not exist', null);\r\n      }\r\n\r\n      if (status !== 200){\r\n        return callback('`Request failed. Returned status of ${status}`', null);\r\n      }\r\n\r\n      return response.json().then(restaurant => {\r\n        callback(null, restaurant);\r\n      })\r\n    })\r\n    .catch(e => {\r\n      const error = (`Request failed with error: ${e}`);\r\n      callback(error, null);     \r\n    })\r\n  }  \r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant.photograph ? `/img/${restaurant.photograph}.webp` : `/img/no_image_available.svg`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = \"An image from the restaurant \" + restaurant.name;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n","/**\r\n * Register service worker\r\n */\r\nif ('serviceWorker' in navigator) {\r\n    // Register a service worker hosted at the root of the\r\n    // site using the default scope.\r\n    navigator.serviceWorker.register('/sw.js').then(function(registration) {\r\n      console.log('Service worker registration succeeded:', registration);\r\n    }).catch(function(error) {\r\n      console.log('Service worker registration failed:', error);\r\n    });\r\n  } else {\r\n    console.log('Service workers are not supported.');\r\n  }\r\n  ","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}