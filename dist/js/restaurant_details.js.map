{"version":3,"sources":["dbhelper.js","restaurant_info.js","sw_register.js","idb.js"],"names":["DBHelper","DATABASE_URL","DB_NAME","OBJECT_STORE_NAME","DB_VER","[object Object]","idb","open","upgradeDb","createObjectStore","keyPath","createIndex","callback","getDb","then","db","transaction","objectStore","getAll","restaurants","length","fetch","response","status","json","store","map","r","put","catch","e","id","restaurant","cuisine","fetchRestaurants","error","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","window","initMap","fetchRestaurantFromURL","console","self","Map","document","getElementById","zoom","center","scrollwheel","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","address","image","className","alt","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","noReviews","ul","forEach","review","createReviewHTML","li","header","classList","add","date","rating","comments","breadcrumb","location","href","replace","RegExp","exec","decodeURIComponent","navigator","serviceWorker","register","registration","log","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","Array","slice","call","nativeObject","query","count","instance","items","iterateCursor","push","undefined","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","default"],"mappings":"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","file":"restaurant_details.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  static get DB_NAME() {\r\n    return 'mws-rr';\r\n  }\r\n\r\n  static get OBJECT_STORE_NAME() {\r\n    return 'restaurants';\r\n  }\r\n\r\n  static get DB_VER() {\r\n    return 1;\r\n  }\r\n\r\n  static getDb() {\r\n    return idb.open(DBHelper.DB_NAME, DBHelper.DB_VER, upgradeDb => {\r\n      const objectStore = upgradeDb.createObjectStore(DBHelper.OBJECT_STORE_NAME, {\r\n        keyPath: 'id'\r\n      });\r\n\r\n      objectStore.createIndex('by-id', 'id');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    DBHelper.getDb()\r\n    .then(db => {\r\n      if (!db) return;\r\n\r\n      return db\r\n        .transaction(DBHelper.OBJECT_STORE_NAME)\r\n        .objectStore(DBHelper.OBJECT_STORE_NAME)\r\n        .getAll();\r\n    })\r\n    .then(restaurants => {\r\n      if (restaurants && restaurants.length > 0) {\r\n        return callback(null, restaurants);\r\n      } else {\r\n        fetch(DBHelper.DATABASE_URL)\r\n        .then(response => {\r\n          const status = response.status\r\n          if (status !== 200){\r\n            const error = (`Request failed. Returned status of ${status}`);\r\n            return callback(error, null);\r\n          }\r\n\r\n          return response.json().then(restaurants => {\r\n            DBHelper.getDb().then(db => {\r\n              if (!db) return;\r\n\r\n              const store = db\r\n                .transaction(DBHelper.OBJECT_STORE_NAME, 'readwrite')\r\n                .objectStore(DBHelper.OBJECT_STORE_NAME);\r\n\r\n              restaurants.map(r => store.put(r));\r\n            });\r\n            callback(null, restaurants);\r\n          })\r\n        })\r\n        .catch(e => {\r\n          const error = (`Request failed with error: ${e}`);\r\n          callback(error, null);\r\n            \r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.DATABASE_URL}/${id}`)\r\n    .then(response => {\r\n      const status = response.status;\r\n      if (status === 404){\r\n        return callback('Restaurant does not exist', null);\r\n      }\r\n\r\n      if (status !== 200){\r\n        return callback('`Request failed. Returned status of ${status}`', null);\r\n      }\r\n\r\n      return response.json().then(restaurant => {\r\n        callback(null, restaurant);\r\n      })\r\n    })\r\n    .catch(e => {\r\n      const error = (`Request failed with error: ${e}`);\r\n      callback(error, null);     \r\n    })\r\n  }  \r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return restaurant.photograph ? `/img/${restaurant.photograph}.webp` : `/img/no_image_available.svg`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","let restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = \"An image from the restaurant \" + restaurant.name;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const header = document.createElement('h4');\r\n  header.classList.add(\"review-header\");\r\n  li.appendChild(header);\r\n\r\n  const name = document.createElement('p');\r\n  name.className = 'review-name';\r\n  name.innerHTML = review.name;\r\n  header.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.className = 'review-date';\r\n  date.innerHTML = review.date;\r\n  header.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.className = 'review-rating';\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n","/**\r\n * Register service worker\r\n */\r\nif ('serviceWorker' in navigator) {\r\n    // Register a service worker hosted at the root of the\r\n    // site using the default scope.\r\n    navigator.serviceWorker.register('/sw.js').then(function(registration) {\r\n      console.log('Service worker registration succeeded:', registration);\r\n    }).catch(function(error) {\r\n      console.log('Service worker registration failed:', error);\r\n    });\r\n  } else {\r\n    console.log('Service workers are not supported.');\r\n  }\r\n  ","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}